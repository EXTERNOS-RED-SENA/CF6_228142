{"remainingRequest":"/home/runner/work/CF6_228142/CF6_228142/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF6_228142/CF6_228142/src/views/Tema1.vue?vue&type=template&id=1c78a242&lang=pug","dependencies":[{"path":"/home/runner/work/CF6_228142/CF6_228142/src/views/Tema1.vue","mtime":1734082089875},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDEKICAgICAgaDEgTWF0ZXJpYWxlcyB5IGhlcnJhbWllbnRhcyBhdmFuemFkYXMKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtZW5kLm1iLTQKICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNy5wbmcnIGFsdD0nJykgICAgICAgCiAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgLmJnMy5wLTQuajEKICAgICAgICAgIHAubWItMCBMb3MgbWF0ZXJpYWxlcyB5IGhlcnJhbWllbnRhcyBhdmFuemFkYXMgZW4gZWwgY29udGV4dG8gZGVsIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyBzZSByZWZpZXJlbiBhIGxvcyBlcXVpcG9zIHkgY29tcG9uZW50ZXMgZXNwZWNpYWxpemFkb3MgcXVlIHNlIHV0aWxpemFuIHBhcmEgZGlzZcOxYXIsIGluc3RhbGFyLCBwcm9iYXIgeSBtYW50ZW5lciB1bmEgICAgaW5mcmFlc3RydWN0dXJhIGRlIHJlZCBlZmljaWVudGUgeSBjb25maWFibGUuIAoKICAgIFNlcGFyYWRvciAKICAgICN0XzFfMS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDEuMSBFcXVpcG9zIGRlIHRlc3RlbyB5IGNlcnRpZmljYWNpw7NuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQgIAogICAgICAuY29sLWxnLTgubXktbGctMC5teS0zCiAgICAgICAgcCBMb3MgZXF1aXBvcyBkZSB0ZXN0ZW8geSBjZXJ0aWZpY2FjacOzbiBzb24gbmVjZXNhcmlvcyBwYXJhIGdhcmFudGl6YXIgcXVlIGVsIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyBjdW1wbGEgY29uIGxvcyBlc3TDoW5kYXJlcyBkZSByZW5kaW1pZW50byB5IGNhbGlkYWQuIEVzdG9zIGVxdWlwb3MgaW5jbHV5ZW4gYW5hbGl6YWRvcmVzIGRlIGNhYmxlYWRvLCBxdWUgdmVyaWZpY2FuIGxhIGludGVncmlkYWQgZGVsIGNhYmxlYWRvIHkgZGV0ZWN0YW4gcHJvYmxlbWFzIGNvbW8gY29ydG9jaXJjdWl0b3MsIGNhYmxlcyBhYmllcnRvcyB5IGNydXphZG9zLiBBZGVtw6FzLCBsb3MgY2VydGlmaWNhZG9yZXMgZGUgY2FibGVhZG8gcHJvcG9yY2lvbmFuIHVuYSBldmFsdWFjacOzbiBjb21wbGV0YSBkZWwgcmVuZGltaWVudG8gZGVsIGNhYmxlYWRvLCBhc2VndXJhbmRvIHF1ZSBjdW1wbGEgY29uIGxhcyBlc3BlY2lmaWNhY2lvbmVzIGRlIGNhdGVnb3LDrWEgKENhdDVlLCBDYXQ2LCBDYXQ2YSwgZXRjLikuIEVzdG9zIGVxdWlwb3Mgc29uIGZ1bmRhbWVudGFsZXMgcGFyYSBhc2VndXJhciBxdWUgbGEgcmVkIGZ1bmNpb25lIGRlIG1hbmVyYSDDs3B0aW1hIHkgc2luIGludGVycnVwY2lvbmVzLgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvOC5wbmcnIGFsdD0nJykgICAgICAgICAgIAoKICAgIFNlcGFyYWRvciAKICAgICN0XzFfMi50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDEuMiBIZXJyYW1pZW50YXMgZXNwZWNpYWxpemFkYXMKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNCAKICAgICAgLmNvbC1sZy05CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzkucG5nJyBhbHQ9JycpICAgICAgICAKICAgICAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAgICAgcCBMYXMgaGVycmFtaWVudGFzIGVzcGVjaWFsaXphZGFzIHBhcmEgbGEgaW1wbGVtZW50YWNpw7NuIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyBpbmNsdXllbiBjb3J0YWRvcmVzIGRlIGNhYmxlLCBwZWxhY2FibGVzLCBoZXJyYW1pZW50YXMgZGUgcHVuem9uYWRvIHkgaGVycmFtaWVudGFzIGRlIHRlcm1pbmFjacOzbiBkZSBjb25lY3RvcmVzLiBMb3MgY29ydGFkb3JlcyBkZSBjYWJsZSBwZXJtaXRlbiBjb3J0YXIgY2FibGVzIGRlIG1hbmVyYSBwcmVjaXNhIHkgc2VndXJhLCBtaWVudHJhcyBxdWUgbG9zIHBlbGFjYWJsZXMgZmFjaWxpdGFuIGxhIGVsaW1pbmFjacOzbiBkZSBsYSBjdWJpZXJ0YSBleHRlcm5hIGRlbCBjYWJsZSBzaW4gZGHDsWFyIGxvcyBjb25kdWN0b3JlcyBpbnRlcm5vcy4gTGFzIGhlcnJhbWllbnRhcyBkZSBwdW56b25hZG8gc2UgdXRpbGl6YW4gcGFyYSBpbnN0YWxhciBjYWJsZXMgZW4gcGFuZWxlcyBkZSBwYXJjaGVvIHkgYmFzdGlkb3Jlcy4gTGFzIGhlcnJhbWllbnRhcyBkZSB0ZXJtaW5hY2nDs24gZGUgY29uZWN0b3JlcywgY29tbyBsb3MgY3JpbXBhZG9yZXMsIGFzZWd1cmFuIHVuYSBjb25leGnDs24gc2VndXJhIHkgZHVyYWRlcmEgZGUgbG9zIGNvbmVjdG9yZXMgUkotNDUuCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmJnMS5wLTQuYnJhZC5tYi00CiAgICAgICAgICAuY29sLWxnLWF1dG8uajEKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTEucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICBwLm1iLTAgTG9zIGNvbmVjdG9yZXMgUkotNDUgc29uIGRpc3Bvc2l0aXZvcyBkZSBjb25leGnDs24gdXRpbGl6YWRvcyBlbiByZWRlcyBkZSB0ZWxlY29tdW5pY2FjaW9uZXMgeSByZWRlcyBkZSBkYXRvcy4gRWwgdMOpcm1pbm8gIlJKLTQ1IiBzZSByZWZpZXJlIGEgdW4gdGlwbyBlc3BlY8OtZmljbyBkZSBjb25lY3RvciBtb2R1bGFyIHF1ZSBzZSB1dGlsaXphIHByaW5jaXBhbG1lbnRlIHBhcmEgY29uZWN0YXIgY2FibGVzIGRlIHBhciB0cmVuemFkbyAoI1tpIHR3aXN0ZWQgcGFpcl0pIGEgZXF1aXBvcyBkZSByZWQsIGNvbW8gI1tpIHJvdXRlcnMsIHN3aXRjaGVzXSwgY29tcHV0YWRvcmFzIHkgb3Ryb3MgZGlzcG9zaXRpdm9zIGRlIHJlZC4gTGEgc2lndWllbnRlIHRhYmxhIGRlc2NyaWJlIGxvcyBjb25lY3RvcmVzIFJKLTQ1LiAgICAgICAgCiAgICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xMC5wbmcnIGFsdD0nJykgIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLWxnLTEyCiAgICAgICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tYm90b25lcwogICAgICAgICAgaDUgVGFibGEgMS4gCiAgICAgICAgICBzcGFuIENhcmFjdGVyw61zdGljYXMgZGUgbG9zIGNvbmVjdG9yZXMgUkotNDUKCiAgICAgICAgLnRhYmxhLWEuY29sb3ItYWNlbnRvLWJvdG9uZXMudGV4dC1jZW50ZXIubWItNQogICAgICAgICAgdGFibGUKICAgICAgICAgICAgY2FwdGlvbiBGdWVudGU6IE9JVCwgMjAyNC4KICAgICAgICAgICAgdGhlYWQKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGggQ2FyYWN0ZXLDrXN0aWNhcyBkZSBjb25lY3RvcmVzIFJKLTQ1CiAgICAgICAgICAgICAgICB0aCBEZXNjcmlwY2nDs24gCgogICAgICAgICAgICB0Ym9keQogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZC5mYXN0LWJvbGQuYmd0MSBEaXNlw7FvIG1vZHVsYXIgCiAgICAgICAgICAgICAgICB0ZCBMb3MgY29uZWN0b3JlcyBSSi00NSB0aWVuZW4gdW4gZGlzZcOxbyBtb2R1bGFyLCBsbyBxdWUgc2lnbmlmaWNhIHF1ZSBzZSBpbnNlcnRhbiBlbiBwdWVydG9zIGNvcnJlc3BvbmRpZW50ZXMgZW4gbG9zIGRpc3Bvc2l0aXZvcyBkZSByZWQgeSBzZSBhc2VndXJhbiBtZWRpYW50ZSB1biBtZWNhbmlzbW8gZGUgYmxvcXVlby4KCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLmZhc3QtYm9sZC5iZ3QxIFBpbmVzIGRlIGNvbnRhY3RvCiAgICAgICAgICAgICAgICB0ZCBVbiBjb25lY3RvciBSSi00NSB0aWVuZSBvY2hvIHBpbmVzIGRlIGNvbnRhY3RvLCBxdWUgc2UgY29uZWN0YW4gYSBsb3Mgb2NobyBoaWxvcyBkZSB1biBjYWJsZSBkZSBwYXIgdHJlbnphZG8uIEVzdG9zIHBpbmVzIGVzdMOhbiBkaXNwdWVzdG9zIGVuIHVuYSBjb25maWd1cmFjacOzbiBlc3TDoW5kYXIgcXVlIHBlcm1pdGUgbGEgdHJhbnNtaXNpw7NuIGRlIGRhdG9zIHkgc2XDsWFsZXMgZGUgcmVkLiAKCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLmZhc3QtYm9sZC5iZ3QxIENvbXBhdGliaWxpZGFkCiAgICAgICAgICAgICAgICB0ZCBMb3MgY29uZWN0b3JlcyBSSi00NSBzb24gY29tcGF0aWJsZXMgY29uIHZhcmlvcyBlc3TDoW5kYXJlcyBkZSBjYWJsZWFkbywgaW5jbHV5ZW5kbyBDYXQ1ZSwgQ2F0NiB5IENhdDZhLCBxdWUgc29uIHV0aWxpemFkb3MgZW4gcmVkZXMgI1tpIEV0aGVybmV0XSBwYXJhIHByb3BvcmNpb25hciB2ZWxvY2lkYWRlcyBkZSB0cmFuc21pc2nDs24gZGUgZGF0b3MgZGUgaGFzdGEgMTAgR2Jwcy4gICAKCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLmZhc3QtYm9sZC5iZ3QxIFVzbyBjb23Dum4KICAgICAgICAgICAgICAgIHRkIExvcyBjb25lY3RvcmVzIFJKLTQ1IHNvbiBhbXBsaWFtZW50ZSB1dGlsaXphZG9zIGVuIHJlZGVzIGRlIMOhcmVhIGxvY2FsIChMQU4pIHkgZW4gYXBsaWNhY2lvbmVzIGRlIHRlbGVjb211bmljYWNpb25lcy4gVGFtYmnDqW4gc2UgdXRpbGl6YW4gZW4gc2lzdGVtYXMgZGUgdGVsZWZvbsOtYSwgYXVucXVlIGVuIGVzdGUgY2FzbywgZWwgdMOpcm1pbm8gIlJKLTQ1IiBwdWVkZSByZWZlcmlyc2UgYSB1biBjb25lY3RvciBzaW1pbGFyLCBwZXJvIGNvbiB1bmEgY29uZmlndXJhY2nDs24gZGUgcGluZXMgZGlmZXJlbnRlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgLnJvdy5iZzQuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgIC5weC1sZy01LnB4LTQKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS01CiAgICAgICAgICAuY29sLWF1dG8KICAgICAgICAgICAgLmxpc3QKICAgICAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICAgICAgaDMubWItMSBUaXBvIGRlIGNvbmVjdG9yZXMgUkotNDUgICAgICAgCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTMuZC1ub25lLmQtbGctYmxvY2suajEgCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE0LnBuZycsIGFsdD0nJykKICAgICAgICAgIC5jb2wtbGctOQogICAgICAgICAgICAuYmc1LmJyYWQucC00LmgtMTAwLmoxCiAgICAgICAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikKICAgICAgICAgICAgICAgIC5iZ3cuc2hhLmJyYWQxLnAtNC5oLTEwMAogICAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNS5wbmcnIGFsdD0nJykgIAogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGg1IENvbmVjdG9yZXMgbWFjaG8KICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBFc3RvcyBzb24gbG9zIGNvbmVjdG9yZXMgcXVlIHNlIGluc2VydGFuIGVuIGxvcyBwdWVydG9zIGRlIGxvcyBkaXNwb3NpdGl2b3MgZGUgcmVkLiBUaWVuZW4gcGluZXMgZGUgY29udGFjdG8gcXVlIHNlIGNvbmVjdGFuIGEgbG9zIGhpbG9zIGRlbCBjYWJsZS4gCgogICAgICAgICAgICAgICAgLmJndy5zaGEuYnJhZDEucC00LmgtMTAwCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE1LnBuZycgYWx0PScnKSAgCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgICAgICAgICAgICAgICAgaDUgQ29uZWN0b3JlcyBoZW1icmEKICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBFc3RvcyBzb24gbG9zIHB1ZXJ0b3MgZW4gbG9zIGRpc3Bvc2l0aXZvcyBkZSByZWQgZG9uZGUgc2UgaW5zZXJ0YW4gbG9zIGNvbmVjdG9yZXMgbWFjaG8uIFRpZW5lbiBvcmlmaWNpb3MgcXVlIHJlY2liZW4gbG9zIHBpbmVzIGRlIGNvbnRhY3RvIGRlbCBjb25lY3RvciBtYWNoby4KCiAgICAgICAgICAgICAgICAuYmd3LnNoYS5icmFkMS5wLTQuaC0xMDAKICAgICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTUucG5nJyBhbHQ9JycpICAKICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTgubXktbGctMC5teS0zCiAgICAgICAgICAgICAgICAgICAgICBoNSBJbnN0YWxhY2nDs24KICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBMYSBpbnN0YWxhY2nDs24gZGUgY29uZWN0b3JlcyBSSi00NSBlbiBjYWJsZXMgZGUgcGFyIHRyZW56YWRvIHJlcXVpZXJlIGVsIHVzbyBkZSBoZXJyYW1pZW50YXMgZXNwZWNpYWxpemFkYXMsIGNvbW8gY3JpbXBhZG9yZXMsIHF1ZSBhc2VndXJhbiB1bmEgY29uZXhpw7NuIHNlZ3VyYSB5IGR1cmFkZXJhIGVudHJlIGxvcyBoaWxvcyBkZWwgY2FibGUgeSBsb3MgcGluZXMgZGVsIGNvbmVjdG9yLiBFcyBpbXBvcnRhbnRlIHNlZ3VpciBsYXMgbm9ybWFzIGRlIGNhYmxlYWRvIGVzdMOhbmRhciAoVDU2OEEgbyBUNTY4QikgcGFyYSBhc2VndXJhciB1bmEgY29uZXhpw7NuIGNvcnJlY3RhIHkgZXZpdGFyIHByb2JsZW1hcyBkZSByZW5kaW1pZW50byBkZSBsYSByZWQuCgogICAgU2VwYXJhZG9yIAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgICN0XzFfMy50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgICAgICBoMiAxLjMgQ29udHJvbCBkZSBjYWxpZGFkIGRlIG1hdGVyaWFsZXMgICAgICAKICAgICAgICBwIEVsIGNvbnRyb2wgZGUgY2FsaWRhZCBkZSBsb3MgbWF0ZXJpYWxlcyBwZXJtaXRlIGFzZWd1cmFyIHF1ZSBlbCBjYWJsZWFkbyBlc3RydWN0dXJhZG8gY3VtcGxhIGNvbiBsb3MgZXN0w6FuZGFyZXMgZGUgcmVuZGltaWVudG8geSBkdXJhYmlsaWRhZC4gRXN0byBpbmNsdXllIGxhIHZlcmlmaWNhY2nDs24gZGUgbGEgY2FsaWRhZCBkZSBsb3MgY2FibGVzLCBjb25lY3RvcmVzLCBwYW5lbGVzIGRlIHBhcmNoZW8geSBvdHJvcyBjb21wb25lbnRlcy4gTG9zIGNhYmxlcyBkZWJlbiBjdW1wbGlyIGNvbiBsYXMgZXNwZWNpZmljYWNpb25lcyBkZSBjYXRlZ29yw61hIHkgZXN0YXIgY2VydGlmaWNhZG9zIHBvciBvcmdhbmlzbW9zIHJlY29ub2NpZG9zLiBMb3MgY29uZWN0b3JlcyB5IHBhbmVsZXMgZGUgcGFyY2hlbyBkZWJlbiBzZXIgZGUgYWx0YSBjYWxpZGFkIHBhcmEgZ2FyYW50aXphciB1bmEgY29uZXhpw7NuIHNlZ3VyYSB5IGR1cmFkZXJhLiBBZGVtw6FzLCBlcyBpbXBvcnRhbnRlIHJlYWxpemFyIHBydWViYXMgcGVyacOzZGljYXMgZGUgbG9zIG1hdGVyaWFsZXMgcGFyYSBkZXRlY3RhciBjdWFscXVpZXIgZGVmZWN0byBvIGRlc2dhc3RlIHF1ZSBwdWVkYSBhZmVjdGFyIGVsIHJlbmRpbWllbnRvIGRlIGxhIHJlZC4gQSBjb250aW51YWNpw7NuLCBzZSBkZXRhbGxhbiBsb3MgYXNwZWN0b3MgY2xhdmUgZGVsIGNvbnRyb2wgZGUgY2FsaWRhZCBkZSBsb3MgbWF0ZXJpYWxlczogICAgICAgICAgICAgICAgICAgICAgCiAgICAgIC5jb2wtbGctMwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE2LnBuZycgYWx0PScnKSAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE3LnBuZycgYWx0PScnKSAgICAgICAKICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIGJnNyIpCiAgICAgICAgICBkaXYodGl0dWxvPSJWZXJpZmljYWNpw7NuIGRlIGxhIGNhbGlkYWQgZGUgbG9zIGNhYmxlcyIpCiAgICAgICAgICAgIHAgTG9zIGNhYmxlcyBkZSByZWQgZGViZW4gY3VtcGxpciBjb24gbGFzIGVzcGVjaWZpY2FjaW9uZXMgZGUgY2F0ZWdvcsOtYSAoQ2F0NWUsIENhdDYsIENhdDZhLCBldGMuKSB5IGVzdGFyIGNlcnRpZmljYWRvcyBwb3Igb3JnYW5pc21vcyByZWNvbm9jaWRvcy4gRXN0YXMgY2VydGlmaWNhY2lvbmVzIGdhcmFudGl6YW4gcXVlIGxvcyBjYWJsZXMgY3VtcGxlbiBjb24gbG9zIGVzdMOhbmRhcmVzIGRlIHJlbmRpbWllbnRvIHkgY2FsaWRhZCBlc3RhYmxlY2lkb3MgcG9yIG9yZ2FuaXphY2lvbmVzIGNvbW8gZWwgVGVsZWNvbW11bmljYXRpb25zIEluZHVzdHJ5IEFzc29jaWF0aW9uIChUSUEpIHkgZWwgQW1lcmljYW4gTmF0aW9uYWwgU3RhbmRhcmRzIEluc3RpdHV0ZSAoQU5TSSkuIExhIHZlcmlmaWNhIGNpw7NuIGRlIGxhIGNhbGlkYWQgZGUgbG9zIGNhYmxlcyBpbmNsdXllIHBydWViYXMgZGUgaW50ZWdyaWRhZCBkZWwgY2FibGUsIHJlc2lzdGVuY2lhIGEgbGEgdHJhY2Npw7NuLCBhaXNsYW1pZW50byB5IHJlbmRpbWllbnRvIGRlIHRyYW5zbWlzacOzbiBkZSBkYXRvcy4KICAgICAgICAgIGRpdih0aXR1bG89IlZlcmlmaWNhY2nDs24gZGUgbGEgY2FsaWRhZCBkZSBsb3MgY29uZWN0b3JlcyIpCiAgICAgICAgICAgIHAgTG9zIGNvbmVjdG9yZXMsIGNvbW8gbG9zIFJKLTQ1LCBkZWJlbiBzZXIgZGUgYWx0YSBjYWxpZGFkIHBhcmEgZ2FyYW50aXphciB1bmEgY29uZXhpw7NuIHNlZ3VyYSB5IGR1cmFkZXJhLiBMYSB2ZXJpZmljYWNpw7NuIGRlIGxhIGNhbGlkYWQgZGUgbG9zIGNvbmVjdG9yZXMgaW5jbHV5ZSBwcnVlYmFzIGRlIHJlc2lzdGVuY2lhIG1lY8OhbmljYSwgaW50ZWdyaWRhZCBkZSBsb3MgcGluZXMgZGUgY29udGFjdG8geSBjb21wYXRpYmlsaWRhZCBjb24gbG9zIGVzdMOhbmRhcmVzIGRlIGNhYmxlYWRvLiBMb3MgY29uZWN0b3JlcyBkZWJlbiBlc3RhciBkaXNlw7FhZG9zIHBhcmEgc29wb3J0YXIgbcO6bHRpcGxlcyBjaWNsb3MgZGUgaW5zZXJjacOzbiB5IGV4dHJhY2Npw7NuIHNpbiBkZWdyYWRhcnNlLCBhc2VndXJhbmRvIHVuYSBjb25leGnDs24gZmlhYmxlIGEgbG8gbGFyZ28gZGVsIHRpZW1wby4gIAogICAgICAgICAgZGl2KHRpdHVsbz0iVmVyaWZpY2FjacOzbiBkZSBsYSBjYWxpZGFkIGRlIGxvcyBwYW5lbGVzIGRlIHBhcmNoZW8iKQogICAgICAgICAgICBwIExvcyBwYW5lbGVzIGRlIHBhcmNoZW8gc29uIGNvbXBvbmVudGVzIHF1ZSBpbnRlcmZpZXJlbiAgZW4gbGEgaW5mcmFlc3RydWN0dXJhIGRlIHJlZCwgeWEgcXVlIHBlcm1pdGVuIGxhIGNvbmV4acOzbiB5IGdlc3Rpw7NuIGRlIGxvcyBjYWJsZXMgZGUgcmVkLiBMYSB2ZXJpZmljYWNpw7NuIGRlIGxhIGNhbGlkYWQgZGUgbG9zIHBhbmVsZXMgZGUgcGFyY2hlbyBpbmNsdXllIHBydWViYXMgZGUgcmVzaXN0ZW5jaWEgbWVjw6FuaWNhLCBpbnRlZ3JpZGFkIGRlIGxvcyBwdWVydG9zIGRlIGNvbmV4acOzbiB5IGNvbXBhdGliaWxpZGFkIGNvbiBsb3MgZXN0w6FuZGFyZXMgZGUgY2FibGVhZG8uIExvcyBwYW5lbGVzIGRlIHBhcmNoZW8gZGViZW4gZXN0YXIgZGlzZcOxYWRvcyBwYXJhIHNvcG9ydGFyIHVuIGFsdG8gbsO6bWVybyBkZSBjb25leGlvbmVzIHkgZGVzY29uZXhpb25lcyBzaW4gZGVncmFkYXJzZSwgYXNlZ3VyYW5kbyB1bmEgY29uZXhpw7NuIGZpYWJsZSB5IGVmaWNpZW50ZS4gIAogICAgICAgICAgZGl2KHRpdHVsbz0iVmVyaWZpY2FjacOzbiBkZSBvdHJvcyBjb21wb25lbnRlcyIpCiAgICAgICAgICAgIHAgQWRlbcOhcyBkZSBsb3MgY2FibGVzLCBjb25lY3RvcmVzIHkgcGFuZWxlcyBkZSBwYXJjaGVvLCBvdHJvcyBjb21wb25lbnRlcyBkZSBsYSBpbmZyYWVzdHJ1Y3R1cmEgZGUgcmVkLCBjb21vIGxvcyBiYXN0aWRvcmVzLCBsYXMgYmFuZGVqYXMgZGUgY2FibGVhZG8geSBsb3Mgc2lzdGVtYXMgZGUgZ2VzdGnDs24gZGUgY2FibGVzLCBkZWJlbiBzZXIgdmVyaWZpY2Fkb3MgcGFyYSBhc2VndXJhciBzdSBjYWxpZGFkLiBFc3RvcyBjb21wb25lbnRlcyBkZWJlbiBjdW1wbGlyIGNvbiBsb3MgZXN0w6FuZGFyZXMgZGUgcmVuZGltaWVudG8geSBkdXJhYmlsaWRhZCwgeSBkZWJlbiBlc3RhciBkaXNlw7FhZG9zIHBhcmEgc29wb3J0YXIgbGFzIGNvbmRpY2lvbmVzIGRlIHVzbyB5IGVsIGVudG9ybm8gZW4gZWwgcXVlIHNlIGluc3RhbGFuLiAgCiAgICAgICAgICBkaXYodGl0dWxvPSJQcnVlYmFzIHBlcmnDs2RpY2FzIGRlIGxvcyBtYXRlcmlhbGVzIikKICAgICAgICAgICAgcCBFcyBpbXBvcnRhbnRlIHJlYWxpemFyIHBydWViYXMgcGVyacOzZGljYXMgZGUgbG9zIG1hdGVyaWFsZXMgcGFyYSBkZXRlY3RhciBjdWFscXVpZXIgZGVmZWN0byBvIGRlc2dhc3RlIHF1ZSBwdWVkYSBhZmVjdGFyIGVsIHJlbmRpbWllbnRvIGRlIGxhIHJlZC4gRXN0YXMgcHJ1ZWJhcyBpbmNsdXllbiBsYSBpbnNwZWNjacOzbiB2aXN1YWwgZGUgbG9zIGNvbXBvbmVudGVzLCBwcnVlYmFzIGRlIHJlbmRpbWllbnRvIGRlbCBjYWJsZWFkbyB5IHZlcmlmaWNhY2lvbmVzIGRlIGxhIGludGVncmlkYWQgZGUgbGFzIGNvbmV4aW9uZXMuIExhcyBwcnVlYmFzIHBlcmnDs2RpY2FzIHBlcm1pdGVuIGlkZW50aWZpY2FyIHkgY29ycmVnaXIgcHJvYmxlbWFzIGFudGVzIGRlIHF1ZSBhZmVjdGVuIGxhIG9wZXJhY2nDs24gZGUgbGEgcmVkLCBhc2VndXJhbmRvIHVuYSBpbmZyYWVzdHJ1Y3R1cmEgZGUgcmVkIGVmaWNpZW50ZSB5IGNvbmZpYWJsZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCg=="},null]}