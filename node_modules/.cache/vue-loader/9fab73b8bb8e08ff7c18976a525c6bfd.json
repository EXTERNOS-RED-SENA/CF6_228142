{"remainingRequest":"/home/runner/work/CF6_228142/CF6_228142/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF6_228142/CF6_228142/src/views/Tema3.vue?vue&type=template&id=2d9ad082&lang=pug","dependencies":[{"path":"/home/runner/work/CF6_228142/CF6_228142/src/views/Tema3.vue","mtime":1734082089875},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF6_228142/CF6_228142/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}